/*
 * =====================================================================================
 *
 *       Filename:  Texture.hpp
 *
 *    Description:
 *
 *        Created:  20/12/2014 01:15:27
 *
 *         Author:  Quentin Bazin, <quent42340@gmail.com>
 *
 * =====================================================================================
 */
#ifndef GK_TEXTURE_HPP_
#define GK_TEXTURE_HPP_

#include <string>

#include "gk/core/IntTypes.hpp"
#include "gk/core/SDLHeaders.hpp"
#include "gk/gl/OpenGL.hpp"
#include "gk/utils/NonCopyable.hpp"

namespace gk {

////////////////////////////////////////////////////////////
/// \brief Image living on the graphics card that can be used for drawing
///
////////////////////////////////////////////////////////////
class Texture : public NonCopyable {
	public:
		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		/// Creates an empty texture.
		///
		////////////////////////////////////////////////////////////
		Texture() = default;

		////////////////////////////////////////////////////////////
		/// \brief Load the texture from a file on the disk
		///
		/// \param filename Relative or absolute path to the file
		///
		////////////////////////////////////////////////////////////
		Texture(const std::string &filename);

		////////////////////////////////////////////////////////////
		/// \brief Load the texture from a SDL_Surface
		///
		/// \param surface Pointer to the surface where the data is stored
		///
		////////////////////////////////////////////////////////////
		Texture(SDL_Surface *surface);

		////////////////////////////////////////////////////////////
		/// \brief Move constructor
		///
		/// \param texture instance to move
		///
		////////////////////////////////////////////////////////////
		Texture(Texture &&texture);

		////////////////////////////////////////////////////////////
		/// \brief Destructor
		///
		////////////////////////////////////////////////////////////
		~Texture() noexcept;

		////////////////////////////////////////////////////////////
		/// \brief Move assignement operator
		///
		/// \param texture instance to move
		///
		////////////////////////////////////////////////////////////
		Texture &operator=(Texture &&texture);

		////////////////////////////////////////////////////////////
		/// \brief Load the texture from a file on the disk
		///
		/// \param filename Relative or absolute path to the file
		///
		////////////////////////////////////////////////////////////
		void loadFromFile(const std::string &filename);

		////////////////////////////////////////////////////////////
		/// \brief Load the texture from a SDL_Surface
		///
		/// \param surface Pointer to the surface where the data is stored
		///
		////////////////////////////////////////////////////////////
		void loadFromSurface(SDL_Surface *surface);

		////////////////////////////////////////////////////////////
		/// \brief Bind a texture for rendering
		///
		/// \param texture Pointer to the texture to bind, can be null to use no texture
		///
		////////////////////////////////////////////////////////////
		static void bind(const Texture *texture);

		////////////////////////////////////////////////////////////
		/// \brief Return the filename of the texture
		///
		/// \return Texture filename
		///
		////////////////////////////////////////////////////////////
		const std::string &filename() const { return m_filename; }

		////////////////////////////////////////////////////////////
		/// \brief Return the width of the texture
		///
		/// \return Width in pixels
		///
		////////////////////////////////////////////////////////////
		u16 width() const { return m_width; }

		////////////////////////////////////////////////////////////
		/// \brief Return the height of the texture
		///
		/// \return Height in pixels
		///
		////////////////////////////////////////////////////////////
		u16 height() const { return m_height; }

	private:
		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		std::string m_filename; ///< Texture filename

		u16 m_width;            ///< Width of the texture
		u16 m_height;           ///< Height of the texture

		GLuint m_texture = 0;   ///< Internal OpenGL texture ID
};

} // namespace gk

#endif // GK_TEXTURE_HPP_
